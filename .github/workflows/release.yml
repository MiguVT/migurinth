name: 'Migurinth App Release'

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        default: 'release'
        required: true

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Extract version from tauri.conf.json
        id: extract_version
        run: |
          VERSION=$(jq -r '.version' apps/app/tauri.conf.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version exists as a tag
        id: check_tag
        run: |
          if git ls-remote --tags origin "v${{ steps.extract_version.outputs.version }}" | grep -q "v${{ steps.extract_version.outputs.version }}"; then
            echo "::error::Version v${{ steps.extract_version.outputs.version }} already exists as a tag. Please increment the version number."
            exit 1
          fi
        shell: bash

  build:
    needs: check_version
    if: success()
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest, ubuntu-22.04]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Rust setup (mac)
        if: startsWith(matrix.platform, 'macos')
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''
          target: x86_64-apple-darwin

      - name: Rust setup
        if: "!startsWith(matrix.platform, 'macos')"
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ''

      - name: Setup rust cache
        uses: actions/cache@v4
        with:
          path: |
            target/**
            !target/release
            !target/*/release/bundle/*/*.dmg
            !target/*/release/bundle/*/*.app.tar.gz
            !target/*/release/bundle/*/*.app.tar.gz.sig
            !target/release/bundle/*/*.dmg
            !target/release/bundle/*/*.app.tar.gz
            !target/release/bundle/*/*.app.tar.gz.sig
            !target/release/bundle/appimage/*.AppImage
            !target/release/bundle/appimage/*.AppImage.tar.gz
            !target/release/bundle/appimage/*.AppImage.tar.gz.sig
            !target/release/bundle/deb/*.deb
            !target/release/bundle/rpm/*.rpm
            !target/release/bundle/msi/*.msi
            !target/release/bundle/msi/*.msi.zip
            !target/release/bundle/msi/*.msi.zip.sig
            !target/release/bundle/nsis/*.exe
            !target/release/bundle/nsis/*.nsis.zip
            !target/release/bundle/nsis/*.nsis.zip.sig
          key: ${{ runner.os }}-rust-target-${{ hashFiles('**/Cargo.lock', '!apps/app/tauri.conf.json') }}
          restore-keys: |
            ${{ runner.os }}-rust-target-

      - name: Clean old bundle artifacts (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          if (Test-Path "target\release") {
            Get-ChildItem -Path "target\release" -Recurse -File | Where-Object { $_.Name -notmatch '\.keep$' } | Remove-Item -Force
          } else {
            Write-Output "target\release does not exist, nothing to clean."
          }

      - name: Clean old bundle artifacts (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ -d target/release ]; then
            find target/release -type f ! -name '*.keep' -delete
          else
            echo "target/release does not exist, nothing to clean."
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Install pnpm via corepack
        shell: bash
        run: |
          corepack enable
          corepack prepare --activate

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev pkg-config libayatana-appindicator3-dev librsvg2-dev

      - name: Install frontend dependencies
        run: pnpm install

      - name: Disable Windows code signing for non-final release builds
        if: ${{ startsWith(matrix.platform, 'windows') && !startsWith(github.ref, 'refs/tags/v') && !inputs.sign-windows-binaries }}
        run: |
          jq 'del(.bundle.windows.signCommand)' apps/app/tauri-release.conf.json > apps/app/tauri-release.conf.json.new
          Move-Item -Path apps/app/tauri-release.conf.json.new -Destination apps/app/tauri-release.conf.json -Force

      - name: build app (macos)
        run: pnpm --filter=@modrinth/app run tauri build --target universal-apple-darwin --config tauri-release.conf.json
        if: startsWith(matrix.platform, 'macos')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: build app (Windows)
        if: startsWith(matrix.platform, 'windows')
        shell: pwsh
        run: |
          $env:JAVA_HOME = "$env:JAVA_HOME_11_X64"
          pnpm --filter=@modrinth/app run tauri build --config tauri-release.conf.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: build app (Linux)
        if: startsWith(matrix.platform, 'ubuntu')
        run: pnpm --filter=@modrinth/app run tauri build --config tauri-release.conf.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: upload ${{ matrix.platform }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            target/release/bundle/appimage/*.AppImage
            target/release/bundle/appimage/*.AppImage.sig

            target/universal-apple-darwin/release/bundle/macos/*.tar.gz
            target/universal-apple-darwin/release/bundle/macos/*.tar.gz.sig

            target/release/bundle/msi/*.msi
            target/release/bundle/msi/*.msi.sig

            target/release/bundle/nsis/*.exe
            target/release/bundle/nsis/*.exe.sig

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Extract version
        id: version
        run: |
          VERSION=$(jq -r '.version' apps/app/tauri.conf.json)
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: debug print version and directory
        run: |
          echo "Version: ${{ env.version }}"
          ls -la artifacts

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.version }}
          name: Release v${{ env.version }}
          body: |
            A new version of the **MiguRinth** has been released! 🎉

            🚀 **Download & Install:**
            - [![Windows](https://img.shields.io/badge/Install-Windows-blue?style=for-the-badge&logo=windows)](https://github.com/${{ github.repository }}/releases/download/v${{ env.version }}/Migurinth_${{ env.version }}_x64-setup.exe)
            - [![Mac](https://img.shields.io/badge/Install-MacOS-black?style=for-the-badge&logo=apple)](https://github.com/${{ github.repository }}/releases/download/v${{ env.version }}/Migurinth_${{ env.version }}_universal.dmg)
            - [![Ubuntu](https://img.shields.io/badge/Install-Ubuntu-orange?style=for-the-badge&logo=ubuntu)](https://github.com/${{ github.repository }}/releases/download/v${{ env.version }}/Migurinth_${{ env.version }}_amd64.deb)
          files: |
            artifacts/release/bundle/appimage/*.AppImage
            artifacts/release/bundle/appimage/*.AppImage.sig
            artifacts/release/bundle/deb/*.deb
            artifacts/release/bundle/deb/*.deb.sig
            artifacts/release/bundle/rpm/*.rpm
            artifacts/release/bundle/rpm/*.rpm.sig

            artifacts/universal-apple-darwin/release/bundle/macos/*.tar.gz
            artifacts/universal-apple-darwin/release/bundle/macos/*.tar.gz.sig
            artifacts/universal-apple-darwin/release/bundle/dmg/*.dmg
            artifacts/universal-apple-darwin/release/bundle/dmg/*.dmg.sig

            artifacts/release/bundle/msi/*.msi
            artifacts/release/bundle/msi/*.msi.sig
            artifacts/release/bundle/nsis/*.exe
            artifacts/release/bundle/nsis/*.exe.sig
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  generate-update-file:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Extract version
        id: extract_version
        shell: bash
        run: |
          VERSION=$(jq -r '.version' apps/app/tauri.conf.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate updates.json
        shell: bash
        run: |
          set -e
          VERSION="${{ env.VERSION }}"
          BASE_URL="https://github.com/MiguVT/migurinth/releases/download/v${VERSION}"
          UPDATES_JSON="updates.json"
          PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          declare -A PLATFORMS=(
            ["linux-x86_64"]="release/bundle/appimage/Migurinth_${VERSION}_amd64.AppImage;release/bundle/appimage/Migurinth_${VERSION}_amd64.AppImage"
            ["darwin-x86_64"]="universal-apple-darwin/release/bundle/macos/Migurinth.app.tar.gz;universal-apple-darwin/release/bundle/macos/Migurinth.app.tar.gz"
            ["darwin-aarch64"]="universal-apple-darwin/release/bundle/macos/Migurinth.app.tar.gz;universal-apple-darwin/release/bundle/macos/Migurinth.app.tar.gz"
            ["windows-x86_64"]="release/bundle/nsis/Migurinth_${VERSION}_x64-setup.exe;release/bundle/nsis/Migurinth_${VERSION}_x64-setup.exe, release/bundle/msi/Migurinth_${VERSION}_en-US.msi"
          )

          echo '{' > $UPDATES_JSON
          echo '  "version": "'${VERSION}'",' >> $UPDATES_JSON
          echo '  "notes": "A new version of the Migurinth has been released!",' >> $UPDATES_JSON
          echo '  "pub_date": "'$PUB_DATE'",' >> $UPDATES_JSON
          echo '  "platforms": {' >> $UPDATES_JSON

          FIRST=1
          for platform in "${!PLATFORMS[@]}"; do
            ENTRY="${PLATFORMS[$platform]}"
            COMPRESSED_FILE=$(echo "$ENTRY" | cut -d';' -f1)
            INSTALL_FILES=$(echo "$ENTRY" | cut -d';' -f2)
            SIG_FILE="artifacts/${COMPRESSED_FILE}.sig"

            # Solo genera entrada si hay firma
            if [ ! -f "$SIG_FILE" ]; then
              echo "⚠️ Faltando firma para ${COMPRESSED_FILE}, se omite." >&2
              continue
            fi

            COMPRESSED_URL="${BASE_URL}/$(basename "$COMPRESSED_FILE" | tr ' ' '.')"
            SIGNATURE=$(cat "$SIG_FILE" | tr -d '\n')

            IFS=',' read -ra INSTALL_ARRAY <<< "$INSTALL_FILES"
            INSTALL_URLS_JSON=""
            FIRST_URL=1
            for f in "${INSTALL_ARRAY[@]}"; do
              URL="${BASE_URL}/$(basename "$f" | tr ' ' '.')"
              if [ $FIRST_URL -eq 1 ]; then
                INSTALL_URLS_JSON="\"${URL}\""
                FIRST_URL=0
              else
                INSTALL_URLS_JSON="${INSTALL_URLS_JSON}, \"${URL}\""
              fi
            done

            if [ $FIRST -eq 1 ]; then
              FIRST=0
            else
              echo "    ," >> $UPDATES_JSON
            fi

            echo "    \"${platform}\": {" >> $UPDATES_JSON
            echo "      \"url\": \"${COMPRESSED_URL}\"," >> $UPDATES_JSON
            echo "      \"signature\": \"${SIGNATURE}\"," >> $UPDATES_JSON
            echo "      \"install_urls\": [ ${INSTALL_URLS_JSON} ]" >> $UPDATES_JSON
            echo "    }" >> $UPDATES_JSON
          done

          echo '  }' >> $UPDATES_JSON
          echo '}' >> $UPDATES_JSON

          echo "Generated updates.json:"
          cat $UPDATES_JSON

      - name: Upload updates.json to release
        shell: bash
        run: gh release upload "v${{ env.VERSION }}" updates.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
